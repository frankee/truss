// Version: {{.Version}}
// Version Date: {{.VersionDate}}

package server

import (
    "context"
    "fmt"
	"net"
    "net/http"
    "net/http/pprof"
    "strings"
    "time"

    // 3d Party
    "github.com/heptiolabs/healthcheck"
    "github.com/prometheus/client_golang/prometheus/promhttp"
    "google.golang.org/grpc"

    "git.aimap.io/go/wayz-kit/utils/network"
    _ "go.uber.org/automaxprocs"

    "git.aimap.io/go/logs"
    wzclient "git.aimap.io/go/wayz-kit/client"
    "git.aimap.io/go/wayz-kit/log/zap"
    "git.aimap.io/go/wayz-kit/log/level"
    "git.aimap.io/go/wayz-kit/metrics"
    "git.aimap.io/go/wayz-kit/sd"
    wzserver "git.aimap.io/go/wayz-kit/server"
    "git.aimap.io/go/wayz-kit/tracing"
    "git.aimap.io/go/wayz-kit/middleware"
    "git.aimap.io/location/genproto/location-apis/mojo/core"
    "git.aimap.io/go/config"

    kitprometheus "github.com/go-kit/kit/metrics/prometheus"
    stdprometheus "github.com/prometheus/client_golang/prometheus"

	// This Service
	pb "{{.PBImportPath -}}"
	"{{.ImportPath -}} /svc"
	"{{.ImportPath -}} /handlers"
)

var _ wzclient.Config

func NewEndpoints(options map[string]interface{}) svc.Endpoints {
	// Business domain.
	var service pb.{{.Service.Name}}Server
	{
		service = handlers.NewService()
		// Wrap Service with middlewares. See handlers/middlewares.go
		service = handlers.WrapService(service, options)
	}

	// Endpoint domain.
	var (
	{{range $i := .Service.Methods -}}
		{{ToLowCamelName $i.Name}}Endpoint = svc.Make{{$i.Name}}Endpoint(service)
	{{end}}
	)

	endpoints := svc.Endpoints{
	{{range $i := .Service.Methods -}}
		{{$i.Name}}Endpoint:    {{ToLowCamelName $i.Name}}Endpoint,
	{{end}}
	}

	// Wrap selected Endpoints with middlewares. See handlers/middlewares.go
	endpoints = handlers.WrapEndpoints(endpoints, options)

	return endpoints
}

// Run starts a new http server, gRPC server, and a debug server with the
// passed config and logger
func Run(cfg wzserver.Config) {
    const FullServiceName = "{{.PackageName}}.{{.Service.Name}}"

    // tracing init
	tracer, c := tracing.New(FullServiceName)
    if c != nil {
        defer c.Close()
    }

    // Create a single logger, which we'll use and give to other components.
    logger := zap.Logger()

    metricsConfig := metrics.NewConfig("metrics")
    fieldKeys := []string{"method", "access_key", "error"}
    count := kitprometheus.NewCounterFrom(stdprometheus.CounterOpts{
        Namespace: metricsConfig.Department,
        Subsystem: metricsConfig.Project,
        Name:      "request_count",
        Help:      "Number of requests received.",
    }, fieldKeys)

    latency := kitprometheus.NewHistogramFrom(stdprometheus.HistogramOpts{
        Namespace: metricsConfig.Department,
        Subsystem: metricsConfig.Project,
        Name:      "request_latency_seconds",
        Help:      "Total duration of requests in seconds.",
    }, fieldKeys)

    validator := middleware.NewValidator()

    endpoints := NewEndpoints(map[string]interface{}{
         "tracer": tracer,
         "logger": logger,
         "count": count,
         "latency": latency,
         "validator": validator,
     })

    sdConfig := sd.NewConfig("sd")
    sdClient := sd.New(sdConfig, logger)

    if sdClient != nil {
        url := "etcd://"+ network.GetHost() + ":" + getGrpcPort(cfg.GrpcAddr)
        err := sdClient.Register(url, FullServiceName, []string{})
        if err != nil {
            panic(err)
        }
        defer sdClient.Deregister()
    }

    // required service clients ...
    //xxClient := xx_client.New(wzclient.NewConfig("xx"), sdClient.Instancer(FullServiceName), tracer, logger)
    //defer xxClient.Close()

	// Mechanical domain.
	errc := make(chan error)

	// Interrupt handler.
	go handlers.InterruptHandler(errc)

	// Debug listener.
	go func() {
	    logs.Infow("begin debug server", "transport", "debug", "address", cfg.DebugAddr)

		m := http.NewServeMux()
		m.Handle("/debug/pprof/", http.HandlerFunc(pprof.Index))
		m.Handle("/debug/pprof/cmdline", http.HandlerFunc(pprof.Cmdline))
		m.Handle("/debug/pprof/profile", http.HandlerFunc(pprof.Profile))
		m.Handle("/debug/pprof/symbol", http.HandlerFunc(pprof.Symbol))
		m.Handle("/debug/pprof/trace", http.HandlerFunc(pprof.Trace))

        m.Handle("/metrics", promhttp.Handler())

        health := healthcheck.NewHandler()
        health.AddLivenessCheck("http service", healthcheck.TCPDialCheck(cfg.HttpAddr, time.Second))
        m.Handle("/health", http.HandlerFunc(health.LiveEndpoint))

		errc <- http.ListenAndServe(cfg.DebugAddr, m)
	}()

	// HTTP transport.
	go func() {
	    logs.Infow("begin http server", "transport", "HTTP", "address", cfg.HttpAddr)
		h := svc.MakeHTTPHandler(endpoints, tracer, logger)
		errc <- http.ListenAndServe(cfg.HttpAddr, h)
	}()

	// gRPC transport.
	go func() {
	    logs.Infow("begin grpc server", "transport", "gRPC", "address", cfg.GrpcAddr)
		ln, err := net.Listen("tcp", cfg.GrpcAddr)
		if err != nil {
			errc <- err
			return
		}

		srv := svc.MakeGRPCServer(endpoints, tracer, logger)
		s := grpc.NewServer(grpc.UnaryInterceptor(unaryServerFilter))
		pb.Register{{.Service.Name}}Server(s, srv)

		errc <- s.Serve(ln)
	}()

	if watchObj, err := config.WatchFunc(level.ChangeLogLevel, level.LevelPath); err == nil {
        defer func() { _ = watchObj.Close() }()
    } else {
        panic(err.Error())
    }

	// Run!
	logs.Info("{{.PackageName}}.{{.Service.Name}}Server", " started.")
	logs.Info("{{.PackageName}}.{{.Service.Name}}Server", <-errc)
	logs.Info("{{.PackageName}}.{{.Service.Name}}Server", " closed.")
}

func getGrpcPort(addr string) string {
    host := strings.Split(addr, ":")
    if len(host) < 2 {
        panic("host name is invalid (" + addr + ")")
    }
    return host[1]
}

func unaryServerFilter(
	ctx context.Context, req interface{},
	info *grpc.UnaryServerInfo,
	handler grpc.UnaryHandler,
) (resp interface{}, err error) {
	if err := middleware.Validate(req); err != nil {
		logs.Errorf("validate request failed, err: %s", err)
		return nil, core.NewError(http.StatusBadRequest, err.Error())
	}

	defer func() {
		if r := recover(); r != nil {
			err = fmt.Errorf("panic: %v", r)
		}
	}()

	resp, err = handler(ctx, req)
	if err != nil {
		return resp, err
	}

	var validatorCfg middleware.ValidatorConfig
	_ = config.ScanKey("validator", &validatorCfg)
	if !validatorCfg.CheckResponse {
		return
	}
	if err = middleware.Validate(resp); err != nil {
		logs.Errorf("validate response failed, err: %s", err)
		return nil, core.NewError(http.StatusInternalServerError, err.Error())
	}
	return
}
